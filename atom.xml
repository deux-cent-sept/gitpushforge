<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Git push --forge</title>
  
  <subtitle>Forger la qualité, commit après commit.</subtitle>
  <link href="https://git-push-forge.github.io/blog/atom.xml" rel="self"/>
  
  <link href="https://git-push-forge.github.io/blog/"/>
  <updated>2023-10-19T16:52:33.297Z</updated>
  <id>https://git-push-forge.github.io/blog/</id>
  
  <author>
    <name>Maxence Mille &amp; Vincent Meziane</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Utiliser un Makefile dans Symfony</title>
    <link href="https://git-push-forge.github.io/blog/072023/makefile-symfony/"/>
    <id>https://git-push-forge.github.io/blog/072023/makefile-symfony/</id>
    <published>2023-07-26T19:47:16.000Z</published>
    <updated>2023-10-19T16:52:33.297Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>Le Makefile est un outil utilisé dans le développement logiciel pour automatiser des tâches courantes. Bien que traditionnellement associé au système d’exploitation Unix et au projet GNU, il est largement utilisé dans divers environnements, y compris les projets Symfony. </p><p>Dans cet article, nous allons voir comment mettre en place un Makefile avec Symfony, comment le faire proprement et de manière facilitée grâce à l’autocomplétion des commandes.</p><blockquote><p>Le Makefile va nous permettre de centraliser en un même endroit toutes les commandes disponibles dans notre projet, mais aussi de créer des process simplifiés pour les développeurs qui rejoignent le projet. Il est également possible de l’utiliser pour automatiser des tâches de déploiement, de tests, de qualité de code, etc.</p></blockquote><h2 id="Sommaire"><a href="#Sommaire" class="headerlink" title="Sommaire"></a>Sommaire</h2><ul><li><a href="#D%E2%80%99ou-vient-le-Makefile">D’où vient le Makefile</a></li><li><a href="#Comprendre-les-mots-cles">Comprendre les mots clés</a></li><li><a href="#Organiser-son-Makefile">Organiser son Makefile</a></li><li><a href="#Un-Makefile-d%E2%80%99exemple">Un Makefile d’exemple 🌟</a></li><li><a href="#Permettre-l%E2%80%99autocompletion">Permettre l’autocomplétion</a></li></ul><h2 id="D’ou-vient-le-Makefile"><a href="#D’ou-vient-le-Makefile" class="headerlink" title="D’où vient le Makefile"></a>D’où vient le Makefile</h2><h3 id="Lien-avec-GNU"><a href="#Lien-avec-GNU" class="headerlink" title="Lien avec GNU"></a>Lien avec GNU</h3><p>Le Makefile tire son nom de l’utilitaire “make” qui est utilisé pour construire des programmes en lisant un fichier de description des dépendances appelé Makefile. Le projet GNU a popularisé l’utilisation du Makefile, le rendant essentiel pour la construction de logiciels.</p><p>Initialement, il était, et est probablement toujours, utilisé pour compiler des programmes à partir de leur code source, en automatisant le processus de compilation, de liaison et d’autres tâches de construction. Cependant, avec le temps, son utilisation s’est étendue pour automatiser diverses tâches dans le développement de logiciels.</p><blockquote><p>C’est de GNU que vient la grosse tête de Gnou que vous voyez probablement dans votre éditeur ou dans les résultats de recherche.</p></blockquote><h3 id="Exemple-d’utilisation"><a href="#Exemple-d’utilisation" class="headerlink" title="Exemple d’utilisation"></a>Exemple d’utilisation</h3><p>Le Makefile utilise une syntaxe spécifique pour définir des règles, des cibles et des dépendances qui permettent de spécifier les étapes nécessaires pour créer des fichiers.</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">TARGET: DEPENDANCES</span></span><br><span class="line">&lt;TAB&gt;RULE</span><br><span class="line">&lt;TAB&gt;RULE</span><br><span class="line">&lt;TAB&gt;RULE</span><br></pre></td></tr></table></figure><blockquote><p>Attention à bien respecter les tabulations et à ne pas utiliser d’espaces pour définir les règles car vous risqueriez de rencontrer cette erreur : <em><code>Makefile:X: *** séparateur manquant. Arrêt.</code></em><br>Cependant, un espace doit être utilisé avant chaque dépendance</p></blockquote><p><strong>La cible</strong> correspond souvent au nom du fichier que l’on souhaite générer (vendor, node_modules, etc..), mais nous verrons plus tard qu’on peut détourner cette fonction pour créer des cibles factices.</p><p><strong>Les dépendances</strong> sont les fichiers qui vont être pris en compte par Make afin de déterminer si la cible doit être recréée ou non. Si la date de modification des fichiers de dépendances est plus récente que la cible, celle-ci doit être recréée.</p><p><strong>Les règles</strong> sont les commandes à lancer pour construire correctement la cible</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">brique.txt:</span></span><br><span class="line">touch brique.txt</span><br><span class="line"></span><br><span class="line"><span class="section">mur.txt: brique.txt</span></span><br><span class="line">touch mur.txt</span><br></pre></td></tr></table></figure><p>Je vais lancer plusieurs fois <code>make mur.txt</code> et voir ce qu’il se passe :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># La première fois : make mur.txt</span></span><br><span class="line"><span class="built_in">touch</span> brique.txt <span class="comment"># La dépendance n&#x27;existe pas elle est donc créée selon sa règle de création, un simple touch</span></span><br><span class="line"><span class="built_in">touch</span> mur.txt <span class="comment"># La cible est créée selon sa règle également, un touch aussi</span></span><br><span class="line"><span class="comment"># La deuxième fois: make mur.txt</span></span><br><span class="line">make: « mur.txt » est à jour. <span class="comment"># mur.txt existe et aucune de ses dépendances n&#x27;a évoluée. Il n&#x27;y a rien de nouveau</span></span><br><span class="line"><span class="comment"># J&#x27;écris un mot dans brique.txt -&gt; `echo &quot;coucou&quot; &gt;&gt; brique.txt` . Je relance `make mur.txt`</span></span><br><span class="line"><span class="built_in">touch</span> mur.txt <span class="comment">#brique.txt existe et n&#x27;a aucune dépendance à analyser. En revanche mur.txt a une dépendance plus récente que lui, on le recrée donc</span></span><br></pre></td></tr></table></figure><p>C’est le moment de complexifier l’exemple, et d’ajouter des subtilités, j’ai ce makefile :</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">composer.json:</span></span><br><span class="line">composer init</span><br><span class="line"></span><br><span class="line"><span class="section">vendor: composer.json</span></span><br><span class="line">composer install</span><br><span class="line"></span><br><span class="line"><span class="section">run.sh: vendor</span></span><br><span class="line">touch run.sh</span><br></pre></td></tr></table></figure><p>Si je lance <code>make run.sh</code> , make va d’abord créer la cible composer.json, puis vendor, puis run.sh. </p><blockquote><p>Notez qu’une cible peut être un fichier, mais aussi un dossier complet. Attention cependant à supprimer le dossier avant de le regénérer s’il n’est pas correctement analysé par make. Ici il vaut mieux ajouter <code>rm -rf vendor</code> avant le composer install.</p></blockquote><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">vendor: composer.json</span></span><br><span class="line">rm -rf vendor</span><br><span class="line">composer install</span><br></pre></td></tr></table></figure><h2 id="Comprendre-les-mots-cles"><a href="#Comprendre-les-mots-cles" class="headerlink" title="Comprendre les mots clés"></a>Comprendre les mots clés</h2><p>Familiarisons-nous d’abord avec quelques notions clés.</p><ol><li><p><strong>DEFAULT_GOAL</strong> : Il s’agit de la cible qui est exécutée par defaut lorsque vous appelez simplement <code>make</code> sans spécifier de cible explicite. Cela permet d’exécuter automatiquement une tâche privilégiée quand on ne sait pas trop quoi lancer. Il pourrait s’agir d’un <code>make install</code> qui créerait toutes les dépendances par exemple, backend, comme frontend. Mais nous allons voir qu’il peut être intéressant de plutot appeler une commande <code>help</code>.</p></li><li><p><strong>.PHONY</strong> : (Fictive, Factice, Fausse) Permet de déclarer des cibles fictives. Les cibles déclarées en tant que phony sont considérées comme ne construisant pas de fichier spécifique. Cela permet plusieurs choses, d’abord d’éviter les conflits avec des fichiers ayant le même nom que les cibles. Par exemple vous ne pourrez pas lancer un <code>make build</code> que vous auriez déclaré s’il existe un fichier <code>build</code> à jour. Afin de se débarasser de ce lien on va ajouter cette nouvelle commande à la liste des commandes fictives. On peut toutes les lister en début de fichier ou les ajouter au cas par cas après chaque commande, c’est vous qui voyez</p> <figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"><span class="keyword">.PHONY</span>: build install ci docker etc...</span></span><br></pre></td></tr></table></figure><p> ou alors</p> <figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">make build:</span><br><span class="line">[...]</span><br><span class="line"><span class="meta"><span class="keyword">.PHONY</span>: build</span></span><br></pre></td></tr></table></figure><blockquote><p>♻️ C’est dans l’usage premier du makefile, celui qui permet de créer des fichiers que cette vérification est pertinente. Mais comme nous n’allons pas nous appuyer sur cette mécanique, vous pouvez vous passer de tous ces .PHONY et ajouter simplement <code>MAKEFLAGS += --always-make</code> en début de fichier. Vos règles seront systématiquement jouées, même si la cible a le même nom qu’un fichier existant et à jour.</p></blockquote></li><li><p><strong>Variables</strong> : Vous pouvez déclarer des variables et les utiliser partout dans le fichier. La déclaration est simple <code>VARIABLE = valeur</code> puis <code>$(VARIABLE)</code> afin de l’utiliser<br>Par exemple : </p> <figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PHP = php</span><br><span class="line">SYMFONY = <span class="variable">$(PHP)</span> bin/console</span><br><span class="line"></span><br><span class="line"><span class="section">database:</span></span><br><span class="line"><span class="variable">$(SYMFONY)</span> doctrine:database:create --if-not-exists</span><br></pre></td></tr></table></figure><p> Il existe également des variables générique, la plus intéressante pour nous étant <code>$@</code> qui représente la cible courante.</p> <figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">database:</span></span><br><span class="line">@echo <span class="string">&quot;J&#x27;éxécute la commande <span class="variable">$@</span>&quot;</span></span><br><span class="line">@<span class="variable">$(SYMFONY)</span> doctrine:database:create --if-not-exists</span><br><span class="line"></span><br><span class="line"><span class="comment"># J&#x27;éxécute la commande database</span></span><br></pre></td></tr></table></figure><blockquote><p>☝ J’en profite pour introduire un autre outil qui est le <code>@</code> en début de commande. Par defaut, make affichera les commandes qui sont éxécutées, mais vous pouvez les dissimuler ainsi pour plus d’esthétisme. Et comme j’aime ce qui est esthétique, je vais le mettre absolument partout au profit d’une description de ce qui est lancé comme ici.</p></blockquote><p> Les autres variables génériques</p><table><thead><tr><th>Symbole</th><th>Représente</th></tr></thead><tbody><tr><td>$?</td><td>Les dépendances qui ont été modifiées</td></tr><tr><td>$^</td><td>Toutes les dépendances</td></tr><tr><td>$+</td><td>Toutes les dépendances sans les doublons</td></tr><tr><td>$&lt;</td><td>La première dépendance</td></tr><tr><td>$@</td><td>La cible courante</td></tr></tbody></table></li><li><p><strong>Fonctions</strong> : Elles nous serviront très peu pour nos usages. Je vous laisse donc libre de les explorer mais je ne les détaillerai pas ici. Sachez seulement qu’on les utilise ainsi : <code>$(fonction argument1,argument2)</code> , qu’il en existe beaucoup mais qu’il est aussi possible d’en définir.</p><p> Une liste de fonctions qui peuvent être intéressantes :<br> <a href="https://www.gnu.org/software/make/manual/html_node/Functions.html">https://www.gnu.org/software/make/manual/html_node/Functions.html</a></p></li></ol><h2 id="Organiser-son-Makefile"><a href="#Organiser-son-Makefile" class="headerlink" title="Organiser son Makefile"></a>Organiser son Makefile</h2><p>Pour bien structurer notre Makefile, nous allons suivre cette organisation :</p><ol><li><strong>Variables</strong> : Nous définirons des variables pour stocker des informations telles que les noms des fichiers, les exécutables, les répertoires, les options de compilation, etc. Cela rendra le Makefile plus flexible et facile à faire évoluer.</li><li><strong>Liste des commandes</strong> : Nous créerons une liste exhaustive des commandes présentes dans le fichier et il sera possible de l’afficher par le biais d’une commande.</li><li><strong>Sections</strong> : Nous regrouperons les commandes connexes dans des sections logiques, ce qui rendra le Makefile plus organisé et facile à explorer.</li><li><strong>Documentation</strong> : Nous ajouterons des commentaires et des explications détaillées à côté de chaque commande pour faciliter la compréhension et permettre une meilleure collaboration entre les membres de l’équipe.</li></ol><h2 id="Un-Makefile-d’exemple"><a href="#Un-Makefile-d’exemple" class="headerlink" title="Un Makefile d’exemple"></a>Un Makefile d’exemple</h2><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line">.DEFAULT_GOAL = help</span><br><span class="line">MAKEFLAGS += --always-make</span><br><span class="line"></span><br><span class="line"><span class="comment"># ============= Variables 🧰 =============</span></span><br><span class="line">ARGUMENTS = <span class="variable">$(<span class="built_in">filter</span>-out <span class="variable">$@</span>,<span class="variable">$(MAKECMDGOALS)</span>)</span></span><br><span class="line"></span><br><span class="line">PROJECT = nom_du_projet</span><br><span class="line">WEB_CONTAINER = web</span><br><span class="line">DOCKER_USER_ID = www-data</span><br><span class="line">SYMFONY = php bin/console</span><br><span class="line">EXEC_WEB = docker-compose exec -u<span class="variable">$(DOCKER_USER_ID)</span>:<span class="variable">$(DOCKER_USER_ID)</span> <span class="variable">$(WEB_CONTAINER)</span></span><br><span class="line">PHPUNIT = ./vendor/bin/phpunit</span><br><span class="line">PHPSTAN = ./vendor/bin/phpstan</span><br><span class="line">PHP_CS_FIXER = ./vendor/bin/php-cs-fixer</span><br><span class="line"></span><br><span class="line"><span class="comment">## ============= Obtenir des infos ❓ =============</span></span><br><span class="line"><span class="section">help: ## Affiche la liste des commandes disponibles</span></span><br><span class="line">@grep -E &#x27;(^[a-zA-Z%0-9_-]+:.*?<span class="comment">##.*$$)|(^##)&#x27; $(MAKEFILE_LIST) | awk &#x27;BEGIN &#123;FS = &quot;:.*?## &quot;&#125;&#123;printf &quot;\033[32m%-30s\033[0m %s\n&quot;, $$1, $$2&#125;&#x27; | sed -e &#x27;s/\[32m##/[33m/&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="section">list-vars: ## Affiche la liste des variables du Makefile</span></span><br><span class="line">@grep -E &#x27;^[a-zA-Z_-]+ = .*$$&#x27; <span class="variable">$(MAKEFILE_LIST)</span> | awk &#x27;BEGIN &#123;FS = <span class="string">&quot; = &quot;</span>&#125;&#123;printf <span class="string">&quot;\033[32m%-30s\033[0m %s\n&quot;</span>, $$1, $$2&#125;&#x27; | sed -e &#x27;s/\[32m<span class="comment">##/[33m/&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## ============= Installer le projet 🏗️ =============</span></span><br><span class="line"><span class="section">composer: ## Installe les dépendances PHP du projet</span></span><br><span class="line">@rm -rf vendor</span><br><span class="line">@<span class="variable">$(EXEC_WEB)</span> composer install</span><br><span class="line"></span><br><span class="line"><span class="section">node_modules: ## Installe les dépendances NodeJS du projet</span></span><br><span class="line">@rm -rf node_modules</span><br><span class="line">@npm install</span><br><span class="line"></span><br><span class="line"><span class="section">watch: ## Lance le watcher pour les assets du projet</span></span><br><span class="line">@npm run watch</span><br><span class="line"></span><br><span class="line"><span class="section">build-front: ## Build les assets du projet</span></span><br><span class="line">@npm run build</span><br><span class="line"></span><br><span class="line"><span class="section">update: ## Met à jour les dépendances PHP du projet</span></span><br><span class="line">@<span class="variable">$(EXEC_WEB)</span> composer update --with-all-dependencies</span><br><span class="line"></span><br><span class="line"><span class="section">assets: ## Installe les assets du projet</span></span><br><span class="line">@<span class="variable">$(EXEC_WEB)</span> <span class="variable">$(SYMFONY)</span> assets:install public/</span><br><span class="line"></span><br><span class="line"><span class="section">database: ## Crée la base de données et le schéma</span></span><br><span class="line">@<span class="variable">$(EXEC_WEB)</span> <span class="variable">$(SYMFONY)</span> doctrine:database:drop --force --if-exists</span><br><span class="line">@<span class="variable">$(EXEC_WEB)</span> <span class="variable">$(SYMFONY)</span> doctrine:database:create --if-not-exists</span><br><span class="line">@<span class="variable">$(EXEC_WEB)</span> <span class="variable">$(SYMFONY)</span> doctrine:schema:create</span><br><span class="line"></span><br><span class="line"><span class="section">fixtures: ## Ajoute les fixtures</span></span><br><span class="line">@<span class="variable">$(EXEC_WEB)</span> <span class="variable">$(SYMFONY)</span> doctrine:fixtures:load --no-interaction</span><br><span class="line"></span><br><span class="line"><span class="section">env: ## Crée le fichier .env.local à partir du .env</span></span><br><span class="line">@cp .env .env.local</span><br><span class="line"></span><br><span class="line"><span class="section">install: composer database assets build-front cc warmup ## Installe l&#x27;environnement de base nécessaire au déploiement en production</span></span><br><span class="line"><span class="section">install-dev: composer database fixtures assets build-front cc warmup ## Installe l&#x27;environnement de base nécessaire au développement</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## ============= Utiliser Symfony 🎼 =============</span></span><br><span class="line"><span class="section">symfony: ## Utilise les commandes Symfony du projet (ex: make symfony debug:router)</span></span><br><span class="line">@<span class="variable">$(EXEC_WEB)</span> <span class="variable">$(SYMFONY)</span> <span class="variable">$(ARGUMENTS)</span></span><br><span class="line"></span><br><span class="line"><span class="section">cc: ## Vide le cache</span></span><br><span class="line">@<span class="variable">$(EXEC_WEB)</span> <span class="variable">$(SYMFONY)</span> c:c</span><br><span class="line"></span><br><span class="line"><span class="section">warmup: ## Préchauffe le cache</span></span><br><span class="line">@<span class="variable">$(EXEC_WEB)</span> <span class="variable">$(SYMFONY)</span> cache:warmup</span><br><span class="line"></span><br><span class="line"><span class="comment">## ============= Utiliser Docker 🐋 =============</span></span><br><span class="line"><span class="section">start: ## Démarre tous les containers</span></span><br><span class="line">@docker compose up --detach</span><br><span class="line"></span><br><span class="line"><span class="section">stop: ## Stop tous les containers</span></span><br><span class="line">@docker-compose stop</span><br><span class="line"></span><br><span class="line"><span class="section">down: ## Supprime tous les containers</span></span><br><span class="line">@docker-compose down --remove-orphans</span><br><span class="line"></span><br><span class="line"><span class="section">build: ## Rebuild les images docker</span></span><br><span class="line">@docker compose build</span><br><span class="line"></span><br><span class="line"><span class="section">logs: ## Affiche les logs des containers</span></span><br><span class="line">@docker-compose logs -f</span><br><span class="line"></span><br><span class="line"><span class="section">bash: ## Attache un shell au container web</span></span><br><span class="line">@docker-compose exec web bash</span><br><span class="line"></span><br><span class="line"><span class="comment">## ============= Qualité du code 👀 =============</span></span><br><span class="line"><span class="section">test: ## Lance les tests PHPUnit avec un filtre et un testsuite optionnels</span></span><br><span class="line">@<span class="variable">$(<span class="built_in">eval</span> testsuite ?= all)</span></span><br><span class="line">@<span class="variable">$(<span class="built_in">eval</span> <span class="built_in">filter</span> ?= &#x27;.&#x27;)</span></span><br><span class="line">@echo <span class="string">&quot;Test suite : <span class="variable">$(testsuite)</span>&quot;</span></span><br><span class="line">@echo <span class="string">&quot;Filtre : <span class="variable">$(filter)</span>&quot;</span></span><br><span class="line">@echo <span class="string">&quot;&quot;</span></span><br><span class="line">@<span class="variable">$(EXEC_WEB)</span> <span class="variable">$(PHPUNIT)</span> --testsuite=<span class="variable">$(testsuite)</span> --filter=<span class="variable">$(filter)</span> --stop-on-failure</span><br><span class="line"></span><br><span class="line"><span class="section">test-all: ## Lance tous les tests PHPUnit</span></span><br><span class="line">@<span class="variable">$(EXEC_WEB)</span> <span class="variable">$(PHPUNIT)</span> --stop-on-failure</span><br><span class="line"></span><br><span class="line"><span class="section">fix: ## Lance php-cs-fixer</span></span><br><span class="line">@<span class="variable">$(EXEC_WEB)</span> <span class="variable">$(PHP_CS_FIXER)</span> fix --verbose</span><br><span class="line"></span><br><span class="line"><span class="section">phpstan: ## Lance PHPStan</span></span><br><span class="line">@<span class="variable">$(EXEC_WEB)</span> <span class="variable">$(PHPSTAN)</span> analyse -c phpstan.neon --memory-limit=-1</span><br><span class="line"></span><br><span class="line"><span class="section">ci: fix phpstan test-all ## Lance tous les tests pour l&#x27;intégration continue</span></span><br></pre></td></tr></table></figure><p>Voici le fichier Makefile que j’utilise sur un de mes projets, il est assez court, mais organisé. Il est grandement inspiré de l’excellent Makefile que nous fournit Loïc Vernet sur son blog <a href="https://www.strangebuzz.com/fr/snippets/le-makefile-parfait-pour-symfony">Juste ici</a>  </p><p>Bien sur, beaucoup de mes recettes dépendent de la façon dont est construit mon environnement, j’ai l’habitude d’utiliser php et composer, directement dans mon container, afin que tout le monde partage les mêmes versions.</p><blockquote><p>🥸 Pour avoir une idée plus claire de la configuration autour de ce makefile, voici ce que j’utilise:</p><ul><li><strong>Docker-compose</strong> pour orchestrer mes container docker</li><li>Un container web basé sur une image <strong>php:8.1-apache</strong> auquel j’ajoute composer et quelques extensions. </li><li>Un container de base de donnée <strong>postgreSQL</strong></li><li>Un container <strong>adminer</strong> pour gérer la base de donnée.</li><li>J’utilise ma version locale de <strong>node</strong> et <strong>npm</strong> pour gérer les assets, mais je pourrais tout à fait utiliser un container node pour cela.</li></ul></blockquote><p>De la même manière, l’utilisateur qui va exécuter les commandes n’a pas forcément besoin d’être précisé selon que vous utilisez un entrypoint ou pas.<br>Ce que je veux dire c’est que vous allez sûrement devoir adapter 2 ou 3 choses, mais voilà une bonne base.</p><p>Comme je l’ai expliqué plus haut, j’ai ajouté une commande <code>help</code> qui affiche la liste des commandes disponibles et c’est le DEFAULT_GOAL. Cela permettra aux développeurs de voir rapidement les commandes disponibles et de les utiliser sans avoir à consulter la documentation.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"> ============= Obtenir des infos ❓ ============= </span><br><span class="line"><span class="built_in">help</span>                           Affiche la liste des commandes disponibles</span><br><span class="line">list-vars                      Affiche la liste des variables <span class="built_in">du</span> Makefile</span><br><span class="line"> ============= Installer le projet 🏗️ ============= </span><br><span class="line">composer                       Installe les dépendances PHP <span class="built_in">du</span> projet</span><br><span class="line">node_modules                   Installe les dépendances NodeJS <span class="built_in">du</span> projet</span><br><span class="line">watch                          Lance le watcher pour les assets <span class="built_in">du</span> projet</span><br><span class="line">build-front                    Build les assets <span class="built_in">du</span> projet</span><br><span class="line">update                         Met à jour les dépendances PHP <span class="built_in">du</span> projet</span><br><span class="line">assets                         Installe les assets <span class="built_in">du</span> projet</span><br><span class="line">database                       Crée la base de données et le schéma</span><br><span class="line">fixtures                       Ajoute les fixtures</span><br><span class="line"><span class="built_in">env</span>                            Crée le fichier .env.local à partir <span class="built_in">du</span> .<span class="built_in">env</span></span><br><span class="line">install                        Installe l´environnement de base nécessaire au déploiement en production</span><br><span class="line">install-dev                    Installe l´environnement de base nécessaire au développement</span><br><span class="line"> ============= Utiliser Symfony 🎼 ============= </span><br><span class="line">symfony                        Utilise les commandes Symfony <span class="built_in">du</span> projet (ex: make symfony debug:router)</span><br><span class="line">cc                             Vide le cache</span><br><span class="line">warmup                         Préchauffe le cache</span><br><span class="line"> ============= Utiliser Docker 🐋 ============= </span><br><span class="line">start                          Démarre tous les containers</span><br><span class="line">stop                           Stop tous les containers</span><br><span class="line">down                           Supprime tous les containers</span><br><span class="line">build                          Rebuild les images docker</span><br><span class="line">logs                           Affiche les logs des containers</span><br><span class="line">bash                           Attache un shell au container web</span><br><span class="line"> ============= Qualité <span class="built_in">du</span> code 👀 ============= </span><br><span class="line"><span class="built_in">test</span>                           Lance les tests PHPUnit avec un filtre et un testsuite optionnels</span><br><span class="line">test-all                       Lance tous les tests PHPUnit</span><br><span class="line">fix                            Lance php-cs-fixer</span><br><span class="line">phpstan                        Lance PHPStan</span><br><span class="line">ci                             Lance tous les tests pour l´intégration <span class="built_in">continue</span></span><br></pre></td></tr></table></figure><h2 id="Permettre-l’autocompletion"><a href="#Permettre-l’autocompletion" class="headerlink" title="Permettre l’autocomplétion"></a>Permettre l’autocomplétion</h2><p>Pour rendre l’utilisation du Makefile encore plus agréable, nous pouvons ajouter la prise en charge de l’autocomplétion des commandes. Cela permettra aux développeurs d’obtenir des suggestions de commandes lorsqu’ils utilisent l’onglet de complétion dans leur terminal.</p><p>Pour permettre l’autocomplétion, nous pouvons utiliser le paquet “make” fourni avec la plupart des distributions Linux. Vous pouvez vérifier s’il est déjà installé sur votre système en exécutant la commande suivante :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make --version</span><br></pre></td></tr></table></figure><p>Si le paquet n’est pas déjà installé, vous pouvez l’installer en utilisant le gestionnaire de paquets de votre système.</p><p>Une fois qu’il est installé, vérifiez si vous avez l’autocomplétion activée en écrivant <code>make</code> puis en appuyant sur la touche <code>tab</code>. Si vous obtenez une liste de noms de fichiers ou de dossiers c’est que l’autocomplétion est déjà activée.</p><p>Si ce n’est pas le cas vous pouvez taper les commandes suivantes pour ajouter à votre fichier ~&#x2F;.zshrc ou ~&#x2F;.bashrc la complétion automatique pour make :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;#Ajout de l&#x27;autocomplétion pour make&quot;</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;source /usr/share/bash-completion/completions/make&quot;</span> &gt;&gt; ~/.bashrc</span><br></pre></td></tr></table></figure><p>Après avoir relancé votre terminal, vous pourrez bénéficier de l’autocomplétion en utilisant la touche <code>tab</code> . Et voilà !</p>]]></content>
    
    
    <summary type="html">Le Makefile est un outil puissant utilisé dans le développement logiciel pour automatiser des tâches courantes. Bien que traditionnellement associé au système d&#39;exploitation Unix et au projet GNU, il est largement utilisé dans divers environnements, y compris les projets Symfony.</summary>
    
    
    
    
    <category term="Outils, Symfony, Makefile" scheme="https://git-push-forge.github.io/blog/tags/Outils-Symfony-Makefile/"/>
    
  </entry>
  
</feed>
